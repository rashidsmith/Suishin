Add IBO Refinement Step
Allow iteration on AI-generated content before locking.

Create refinement endpoint:

typescript// /server/routes/sessionRoutes.js
router.post('/sessions/:id/refine-ibos', async (req, res) => {
  const { currentContent, refinementRequest } = req.body;
  
  try {
    const session = await getSession(req.params.id);
    const result = await aiService.refineIBOs(
      currentContent, 
      refinementRequest, 
      session.generationParams
    );
    
    res.json({ success: true, content: result.content });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

Create refinement component:

typescript// /client/src/components/RefineIBOsStep.jsx
const RefineIBOsStep = ({ sessionId, onStepComplete }) => {
  const { aiContent, updateRefinedIBOs } = useAIContent(sessionId);
  const [refinementRequest, setRefinementRequest] = useState('');
  const [isRefining, setIsRefining] = useState(false);

  const handleRefine = async (request) => {
    setIsRefining(true);
    try {
      const response = await api.refineIBOs(sessionId, {
        currentContent: aiContent.refinedIBOs,
        refinementRequest: request
      });
      updateRefinedIBOs(response.data.content);
    } catch (error) {
      console.error('Refinement failed:', error);
    } finally {
      setIsRefining(false);
    }
  };

  const handleLock = () => {
    // Will implement IBO creation in next prompt
    onStepComplete('refine-ibos');
  };

  return (
    <div className="space-y-4">
      <h3>Refine Your IBOs</h3>
      
      <div className="grid grid-cols-2 gap-4">
        <button onClick={() => handleRefine("Make more specific and measurable")}>
          📊 More Specific
        </button>
        <button onClick={() => handleRefine("Simplify for beginner level")}>
          📚 Simplify
        </button>
        <button onClick={() => handleRefine("Add practical application examples")}>
          🔧 More Practical
        </button>
        <button onClick={() => handleRefine("Focus on immediate business impact")}>
          💼 Business Impact
        </button>
      </div>

      <div className="flex space-x-2">
        <input
          value={refinementRequest}
          onChange={(e) => setRefinementRequest(e.target.value)}
          placeholder="Custom refinement request..."
          className="flex-1"
        />
        <button 
          onClick={() => handleRefine(refinementRequest)}
          disabled={isRefining || !refinementRequest}
        >
          {isRefining ? 'Refining...' : 'Refine'}
        </button>
      </div>

      <div className="bg-gray-50 p-4 rounded">
        <textarea
          value={aiContent.refinedIBOs || ''}
          onChange={(e) => updateRefinedIBOs(e.target.value)}
          className="w-full h-64 bg-transparent"
          placeholder="Generated IBOs will appear here..."
        />
      </div>

      <div className="flex justify-between">
        <button onClick={() => window.history.back()}>← Back</button>
        <button 
          onClick={handleLock}
          className="bg-green-600 text-white px-4 py-2 rounded"
          disabled={!aiContent.refinedIBOs}
        >
          Lock IBOs & Continue →
        </button>
      </div>
    </div>
  );
};
Test: Can refine IBOs iteratively, manual editing works, ready for locking step.